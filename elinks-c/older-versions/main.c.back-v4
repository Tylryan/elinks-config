#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h> // EXIT_SUCCESS/EXIT_FAILURE
#include <sysexits.h>
#include <errno.h>

#define TRUE 1
#define FALSE 0

/* 
 * This code is probably pretty easy to break
*/

// Pretty much never allowed to use constants.
char YOUR_FAVORITE_BROWSER[] = "otter-browser ";
char ELINKS_CONFIG_PATH[] = "-config-dir ~/.config/elinks ";

typedef enum { duck, google } SearchEngine;

// TODO split into Entry, Options, and something
typedef struct {
    char * application_binary;
    char * elinks_config_path;
    SearchEngine search_engine;
    char * base_search;
    char * search_terms;
    int arg_num;
    char ** args;
    char * flag;
    int has_flag;
    int use_gui;
    char * final_url;
} UserEntry;


// ###################### FUNCTIONS DECLARATIONS #############################
void print_help_message(char * PROGRAM_NAME);
int contains_a_dot(char * string, int str_len);
void base_elinks_url(UserEntry * user_search);
void add_command_ending(UserEntry * user_entry);
void print_help_message(char * program_name);
void args_to_url(UserEntry * user_entry, int arg_index);
int execute_or_print_error(char * command);
void add_elinks_config(UserEntry * user_entry);
void free_all_memory(UserEntry user_entry);
// #######################  MAIN #############################################
int main(int argc, char *argv[]){

    char * PROGRAM_NAME = argv[0];

    UserEntry user_entry = {
        // application_binary
        malloc(25 * sizeof(char)), 
        // elinks_config_path
        ELINKS_CONFIG_PATH, 
        // SearchEngine
        duck, 
        // base_search
        "duckduckgo.com/?q=", 
        // search_terms
        malloc(100 * sizeof(char)), 
        // arg_num
        argc, 
        // args
        argv, 
        //  flag
        argv[1], 
        // has_flag
        0, 
        // use_gui
        0, 
        // final_url
        malloc(100 * sizeof(char))
    };
    // Default Elinks
    strcpy(user_entry.application_binary,"elinks ");
    user_entry.search_engine = duck;
    /* user_entry.base_search = "duckduckgo.com/?q="; */

    int max_args = 20;
    if (user_entry.arg_num > max_args){
        printf("Error: Entry too big.\n");
        exit(EXIT_FAILURE);
    }
    // If no args entered, run "elinks"
    if (argc == 1) {
        user_entry.final_url = realloc(user_entry.final_url, 25 * sizeof(char) );
        base_elinks_url(&user_entry);

        user_entry.final_url = realloc(user_entry.final_url, 10 * sizeof(char));
        add_command_ending(&user_entry);

        execute_or_print_error(user_entry.final_url);
        free_all_memory(user_entry);
        exit(EXIT_SUCCESS);
    }

    int needs_help = (
            (strcmp(user_entry.flag, "-h") == 0) || 
            (strcmp(user_entry.flag, "--help") == 0)
            );
    int wants_gui_browser = (
            (strcmp(user_entry.flag, "-o") == 0) || 
            (strcmp(user_entry.flag, "--otter") == 0)
            );

    if (needs_help){
        print_help_message(PROGRAM_NAME);
        exit(EXIT_SUCCESS);

    } 
    if (wants_gui_browser){
        // TODO Free this
        user_entry.application_binary = realloc(user_entry.application_binary, 25 * sizeof(char));
        strcpy(user_entry.application_binary, YOUR_FAVORITE_BROWSER);
        user_entry.has_flag = 1;
        user_entry.use_gui = 1;
    }


    // If there is a "." in arg1, it's probably a url
    int start_of_args = 1;
    if ( user_entry.has_flag ) start_of_args = 2;
    int is_complete_url = contains_a_dot(argv[start_of_args], strlen(argv[start_of_args]));
    // Don't ask. Don't know
    // Should be len of string + 1;
    size_t url_len = 4 * strlen(argv[1]);
    if (is_complete_url){
        if (strlen(argv[1]) > 150) {
            printf("Error: Url is too big\n");
            exit(EXIT_FAILURE);
        }
         strcat(user_entry.final_url,user_entry.application_binary);
         // Will only add config if application chosen is elinks */
         user_entry.final_url = realloc(user_entry.final_url, 50 * sizeof(char));
         add_elinks_config(&user_entry); 

         char * url=argv[start_of_args];
         // Max url length is 100 */
         user_entry.final_url = realloc(user_entry.final_url, url_len * sizeof(char)); 
         strcat(user_entry.final_url, url);

         user_entry.final_url = realloc(user_entry.final_url, 50 * sizeof(char));
         add_command_ending(&user_entry);

         execute_or_print_error(user_entry.final_url);

        free_all_memory(user_entry);
        exit(EXIT_SUCCESS);
    }

    else {
        // Turning args into "arg1+arg2+arg3"
        for (int i = 1; i < user_entry.arg_num; i++){
            args_to_url(&user_entry, i);
        }
        user_entry.final_url = realloc(user_entry.final_url, 250 * sizeof(char));
        strcat(user_entry.final_url, user_entry.application_binary);
        add_elinks_config(&user_entry);
        strcat(user_entry.final_url, user_entry.base_search);
        strcat(user_entry.final_url, user_entry.search_terms);
        strcat(user_entry.final_url, " 2>/dev/null");

        execute_or_print_error(user_entry.final_url);
        free_all_memory(user_entry);
        exit(EXIT_SUCCESS);
        }

    }

// ###################### FUNCTION INSTANTIATION ##############################

// Does the string contain a dot?
int contains_a_dot(char * string, int str_len){
    for (int i = 0; i < str_len; i++) 
        if (string[i] == '.') return TRUE;
    return FALSE;
}

// Boy this was a pain to figure out.
// Must pass reference to change outside values, duh
void base_elinks_url(UserEntry * user_entry){
    strcpy(user_entry -> final_url, user_entry -> application_binary); 
    strcat(user_entry -> final_url, user_entry -> elinks_config_path);
}

void add_command_ending(UserEntry * user_entry){
    if (user_entry->use_gui == FALSE){
        strcat(user_entry -> final_url, " 2>/dev/null");
    }
    else {
        strcat(user_entry -> final_url, " 2>/dev/null &");
    }
}

void print_help_message(char * program_name){
        char help_command[30] = "bash bash/help_message.sh ";
        strcat(help_command, program_name);
        execute_or_print_error(help_command);
}

void args_to_url(UserEntry * user_entry, int arg_index){
    if (user_entry -> has_flag) arg_index = 2;
    strcat(user_entry -> search_terms, user_entry -> args[arg_index]);
    // Don't add "+" to the last argument
    if (arg_index != (user_entry -> arg_num -1)) 
        strcat(user_entry -> search_terms, "+");

}

int execute_or_print_error(char * command){
        int error;
        if ((error = system(command) != 0)) 
            strerror(errno);
        return 0;
}

void add_elinks_config(UserEntry * user_entry){
    int is_elinks = strcmp(user_entry -> application_binary, "elinks ");
    if (is_elinks == 0) 
        strcat(user_entry -> final_url, user_entry -> elinks_config_path);
}

void free_all_memory(UserEntry user_entry){
        free(user_entry.application_binary);
        free(user_entry.search_terms);
        free(user_entry.final_url);
}
